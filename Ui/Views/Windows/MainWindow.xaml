<ui:FluentWindow
    x:Class="Ui.Views.Windows.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
    xmlns:components="clr-namespace:Ui.Components"
    xmlns:wpfui="clr-namespace:AvalonDock.Themes.WPFUI;assembly=AvalonDock.Themes.WPFUI"
    xmlns:system="clr-namespace:System;assembly=netstandard"
    xmlns:viewmodels="clr-namespace:Ui.ViewModels.Generics"
    xmlns:menuBarViewModel="clr-namespace:Ui.ViewModels.Components.MenuBar"
    xmlns:model="clr-namespace:Ui.Models"
    xmlns:helpers="clr-namespace:Ui.Helpers"
    xmlns:diagram="clr-namespace:Ui.ViewModels.Components.Diagram"
    xmlns:diagram1="clr-namespace:Ui.Views.UserControls.Diagram"
    xmlns:hexViewer="clr-namespace:Ui.ViewModels.Components.HexViewer"
    xmlns:hex="clr-namespace:Ui.Views.UserControls.Hex"
    xmlns:viewModel="clr-namespace:Ui.Interfaces.ViewModel"
    xmlns:appearance="clr-namespace:Wpf.Ui.Appearance;assembly=Wpf.Ui"
    xmlns:microprogram="clr-namespace:Ui.Views.UserControls.Microprogram"
    xmlns:menuBar="clr-namespace:Ui.Views.UserControls.MenuBar"
    d:DataContext="{d:DesignInstance Type=viewModel:IMainWindowViewModel, IsDesignTimeCreatable=False}"
    Title="{Binding ApplicationTitle}"
    Width="1100"
    Height="650"
    WindowStartupLocation="CenterScreen"
    Foreground="{DynamicResource TextFillColorPrimaryBrush}"
    WindowBackdropType="Mica"
    ExtendsContentIntoTitleBar="True"
    WindowCornerPreference="Round"
    mc:Ignorable="d"
    Loaded="MainWindow_OnLoaded">
    <Window.Resources>
        <helpers:ThemeToIndexConverter x:Key="ThemeToIndexConverter" />
        <helpers:EnumEqualsConverter    x:Key="EnumEqualsConverter" />
        <helpers:ThemeToToggleConverter x:Key="ThemeToToggleConverter" />
        <helpers:ThemeToIconConverter x:Key="ThemeToIconConverter" />
    </Window.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" /> <!-- TitleBar -->
            <RowDefinition Height="Auto" /> <!-- Menu / Toolbar -->
            <RowDefinition Height="*" />    <!-- AvalonDock -->
        </Grid.RowDefinitions>

        <ui:TitleBar
            x:Name="TitleBar"
            Title="{Binding ApplicationTitle}"
            Grid.Row="0"
            CloseWindowByDoubleClickOnIcon="True"
            Height="30">
            <ui:TitleBar.Icon>
                <ui:ImageIcon Source="pack://application:,,,/Assets/wpfui-icon-256.png" />
            </ui:TitleBar.Icon>

            <ui:TitleBar.Header>
                <Menu Height="48" Margin="0 -9 0 0">
                    <ui:MenuItem Header="File">
                        <MenuItem 
                            Command="{Binding MenuBar.NewDocumentCommand}" Header="New" 
                            IsEnabled="{Binding ActionsBar.NotDebugging}"/>
                        <MenuItem Command="{Binding MenuBar.OpenDocumentCommand}" Header="Open"
                                  IsEnabled="{Binding ActionsBar.NotDebugging}"/>
                        <Separator />
                        <MenuItem Command="{Binding ActionsBar.LoadJsonCommand}" IsEnabled="{Binding ActionsBar.NotDebugging}" Header="Load MPM" />
                        <MenuItem Command="{Binding ActiveDocument.SaveAsCommand}"
                                  Header="Save As..." />
                        <Separator />
                        <MenuItem IsEnabled="False" Command="{Binding ActiveDocument.CloseCommand}" Header="Close" />
                    </ui:MenuItem>

                    <ui:MenuItem Header="Edit">
                        <menuBar:LayoutControl ViewModel="{Binding MenuBar.LayoutControl}"/>
                        <MenuItem Header="Step Level">
                            <MenuItem Header="Microcommand"
                                     IsChecked="{Binding DataContext.ActionsBar.StepLevel, Mode=TwoWay, ConverterParameter=Microcommand}"  
                                     Command="{Binding ActionsBar.SetStepLevelCommand}"  
                                     CommandParameter="{x:Static viewModel:StepLevel.Microcommand}" />
                            <MenuItem Header="Microinstructions"  
                                  IsChecked="{Binding DataContext.ActionsBar.StepLevel, Mode=TwoWay, ConverterParameter=Microinstruction}"  
                                  Command="{Binding ActionsBar.SetStepLevelCommand}"  
                                  CommandParameter="{x:Static viewModel:StepLevel.Microinstruction}" />
                            <MenuItem Header="Instruction"
                                  IsChecked="{Binding DataContext.ActionsBar.StepLevel, Mode=TwoWay, ConverterParameter=Instruction}"  
                                  Command="{Binding ActionsBar.SetStepLevelCommand}"  
                                  CommandParameter="{x:Static viewModel:StepLevel.Instruction}" />
                        </MenuItem>
                        <MenuItem Header="Edit Interrupts" IsEnabled="{Binding ActionsBar.NotDebugging}" x:Name="EditInterruptsMenu"/>
                    </ui:MenuItem>
                    <ui:MenuItem Header="View">
                        <MenuItem Header="Number Format">
                            <MenuItem Header="Hex"
                                 Command="{Binding MenuBar.SetNumberFormatCommand}"
                                 CommandParameter="{x:Static model:NumberFormat.Hex}" />
                            <MenuItem Header="Decimal"
                              Command="{Binding MenuBar.SetNumberFormatCommand}"
                              CommandParameter="{x:Static model:NumberFormat.Decimal}" />
                            <MenuItem Header="Binary"
                              Command="{Binding MenuBar.SetNumberFormatCommand}"  
                              CommandParameter="{x:Static model:NumberFormat.Binary}" />
                        </MenuItem>

                         <MenuItem
                            Header="Properties"
                            IsCheckable="True"
                            IsChecked="{Binding Workspace.ActiveDocumentsService.FileStats.IsVisible, Mode=TwoWay}"
                            Command="{Binding MenuBar.ShowFileStatsCommand}" />
                        <MenuItem
                            Header="Diagram"
                            IsCheckable="True"
                            IsChecked="{Binding Workspace.ActiveDocumentsService.Diagram.IsVisible, Mode=TwoWay}"
                            Command="{Binding MenuBar.ShowDiagramCommand}" />
                        <MenuItem
                            Header="MainMemory"
                            IsCheckable="True"
                            IsChecked="{Binding Workspace.ActiveDocumentsService.HexViewer.IsVisible, Mode=TwoWay}"
                            Command="{Binding MenuBar.ShowHexViewerCommand}" />
                        <MenuItem
                            Header="Microprogram"
                            IsCheckable="True"
                            IsChecked="{Binding Workspace.ActiveDocumentsService.Microprogram.IsVisible, Mode=TwoWay}"
                            Command="{Binding MenuBar.ShowMicroprogramCommand}" />
                    </ui:MenuItem>
                    <ui:MenuItem Header="Help">
                        <MenuItem Command="{Binding ActionsBar.OpenReferenceManualCommand}" Header="Reference Manual"/>
                        <MenuItem Command="{Binding ActionsBar.OpenDevGuideCommand}" Header="Developer's Guide"/>
                        <MenuItem Command="{Binding ActionsBar.OpenInstructionEncodingCommand}" Header="Instruction Encoding"/>
                        <MenuItem Command="{Binding ActionsBar.OpenISACommand}" Header="Instruction Set Architecture"/>
                    </ui:MenuItem>
                </Menu>

            </ui:TitleBar.Header>
        </ui:TitleBar>

        <Grid Grid.Row="1" Height="36">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <!-- Left-aligned action buttons -->
            <StackPanel Grid.Column="0" Orientation="Horizontal" DataContext="{Binding ActionsBar}">
                <ui:Button
                    Command="{Binding RunCodeCommand}"
                    IsEnabled="{Binding CanRun}"
                    VerticalAlignment="Top"
                    ToolTip="Run"
                    Height="30"
                    Width="30"
                    Padding="0"
                    Margin="10,0,10,0"
                    Appearance="Transparent"
                    BorderBrush="{x:Null}">
                    <ui:SymbolIcon Symbol="TriangleRight16" Foreground="#E413D01F" />
            </ui:Button>

            <ui:Button
                Command="{Binding StartDebugCommand}"
                IsEnabled="{Binding CanDebug}"
                VerticalAlignment="Top"
                ToolTip="Debug"
                Height="30"
                Width="30"
                Padding="0"
                Margin="0,0,10,0"
                Appearance="Transparent"
                BorderBrush="{x:Null}">
                <ui:SymbolIcon Symbol="Bug24" />
            </ui:Button>

            <ui:Button Command="{Binding RunAssembleSourceCodeServiceCommand}"
                       ToolTip="Assemble"
                       IsEnabled="{Binding CanAssemble}"
                       VerticalAlignment="Top"
                       Height="30"
                       Width="30"
                       Padding="0"
                       Margin="0,0,10,0"
                       Appearance="Transparent"
                       BorderBrush="{x:Null}">
                <ui:SymbolIcon Symbol="Settings24" />
            </ui:Button>

            <ui:Button
                Command="{Binding StepCommand}"
                IsEnabled="{Binding IsDebugging}"
                VerticalAlignment="Top"
                ToolTip="Step Into"
                Height="30"
                Width="30"
                Padding="0"
                Margin="0,0,10,0"
                Appearance="Transparent"
                BorderBrush="{x:Null}">
                <ui:SymbolIcon Symbol="ArrowStepIn16" />
            </ui:Button>

            <ui:Button
                Command="{Binding ResetProgramCommand}"
                IsEnabled="{Binding IsDebugging}"
                VerticalAlignment="Top"
                ToolTip="Reset"
                Height="30"
                Width="30"
                Padding="0"
                Margin="0,0,10,0"
                Appearance="Transparent"
                BorderBrush="{x:Null}">
                <ui:SymbolIcon Symbol="ArrowReset24" />
            </ui:Button>

            <ui:Button
                Command="{Binding StopDebugCommand}"
                VerticalAlignment="Top"
                IsEnabled="{Binding IsDebugging}"
                ToolTip="Stop"
                Height="30"
                Width="30"
                Padding="0"
                Margin="0,0,10,0"
                Appearance="Transparent"
                BorderBrush="{x:Null}">
                <ui:SymbolIcon Symbol="Stop24" Foreground="#E4FF3F3F" />
            </ui:Button>

            <Menu Height="30">
                <ui:MenuItem x:Name="TriggerInterruptMenu" IsEnabled="{Binding IsDebugging}" Height="30" Width="30" ToolTip="Trigger Interrupt">
                    <MenuItem.Header>
                        <ui:SymbolIcon Symbol="Flash16" Height="30" Width="30" Margin="-16,-20,-16,-20" />
                    </MenuItem.Header>
                </ui:MenuItem>
            </Menu>
            </StackPanel>
            
            <!-- Right-aligned theme toggle button -->
            <StackPanel Grid.Column="1" Orientation="Horizontal" Margin="0,0,10,0" VerticalAlignment="Center">
                <!-- Theme Toggle Button -->
                <ui:Button
                    Command="{Binding Settings.ChangeThemeCommand}"
                    CommandParameter="{Binding Settings.CurrentApplicationTheme, Converter={StaticResource ThemeToToggleConverter}}"
                    VerticalAlignment="Center"
                    ToolTip="Toggle Light/Dark Theme"
                    Height="30"
                    Width="30"
                    Padding="0"
                    Appearance="Transparent"
                    BorderBrush="{x:Null}">
                    <ui:SymbolIcon Symbol="{Binding Settings.CurrentApplicationTheme, Converter={StaticResource ThemeToIconConverter}}" />
                </ui:Button>
            </StackPanel>
        </Grid>

        <DockingManager
            x:Name="DockingManagerInstance"
            Grid.Row="2"
            ActiveContent="{Binding ActiveDocumentsService.SelectedDocument, Mode=TwoWay}"
            DocumentsSource="{Binding ActiveDocumentsService.Documents}"
            DataContext="{Binding Workspace}"
            AnchorableClosing="DockManager_AnchorableClosing"
            DocumentClosing="DockingManagerInstance_DocumentClosing">
            <DockingManager.Theme>
                <wpfui:WPFUITheme />
            </DockingManager.Theme>
            <DockingManager.LayoutItemTemplateSelector>
                <components:PanesTemplateSelector>
                    <!-- Text editor -->
                    <components:PanesTemplateSelector.FileViewTemplate>
                        <DataTemplate DataType="{x:Type viewmodels:FileViewModel}">
                            <components:StyledAvalonEdit
                                IsReadOnly="{Binding DataContext.ActionsBar.IsDebugging,RelativeSource={RelativeSource AncestorType=Window}}"
                                x:Name="TextEditor"
                                SyntaxHighlighting="Custom"
                                FontFamily="Consolas"
                                FontSize="10pt"
                                ShowLineNumbers="True"
                                TextChanged="OnTextChanged"
                                Text="{Binding Content, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
                                Loaded="OnEditorLoaded"/>
                        </DataTemplate>
                    </components:PanesTemplateSelector.FileViewTemplate>
                    <!-- Properties -->
                    <components:PanesTemplateSelector.FileStatsViewTemplate>
                        <DataTemplate DataType="{x:Type viewmodels:FileStatsViewModel}">
                            <Border Padding="5">
                                <StackPanel Orientation="Vertical">
                                    <TextBlock
                                        Text="{Binding FileSize, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
                                    <TextBlock
                                        Text="{Binding LastModified, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
                                    <TextBox IsReadOnly="True"
                                             Text="{Binding FilePath, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
                                    <TextBox IsReadOnly="True"
                                             Text="{Binding FileName, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
                                </StackPanel>
                            </Border>
                        </DataTemplate>
                    </components:PanesTemplateSelector.FileStatsViewTemplate>
                    <!-- Diagram -->
                    <components:PanesTemplateSelector.DiagramViewTemplate>
                        <DataTemplate DataType="{x:Type diagram:DiagramViewModel}">
                            <diagram1:DiagramUserControl ViewModel="{Binding}"/>
                        </DataTemplate>
                    </components:PanesTemplateSelector.DiagramViewTemplate>
                    <!-- HexViewer -->
                    <components:PanesTemplateSelector.HexViewTemplate>
                        <DataTemplate DataType="{x:Type hexViewer:HexViewModel}">
                            <hex:HexControl ViewModel="{Binding}"/>
                        </DataTemplate>
                    </components:PanesTemplateSelector.HexViewTemplate>
                    <!-- Microprogram -->
                    <components:PanesTemplateSelector.MicroprogramViewTemplate>
                        <DataTemplate DataType="{x:Type diagram:MicroprogramMemoryViewModel}">
                            <microprogram:MicroprogramControl ViewModel="{Binding}"/>
                        </DataTemplate>
                    </components:PanesTemplateSelector.MicroprogramViewTemplate>
                </components:PanesTemplateSelector>

            </DockingManager.LayoutItemTemplateSelector>

            <DockingManager.LayoutItemContainerStyleSelector>
                <components:PanesStyleSelector>
                    <components:PanesStyleSelector.ToolStyle>
                        <Style TargetType="{x:Type LayoutAnchorableItem}">
                            <Setter Property="Title" Value="{Binding Model.Title}" />
                            <Setter Property="CanClose" Value="True" />
                            <!-- <Setter Property="Visibility" -->
                            <!--         Value="{Binding Model.IsVisible, Mode=OneWay, Converter={StaticResource BoolToVisibilityConverter}, ConverterParameter={StaticResource False}}" /> -->
                            <Setter Property="ContentId" Value="{Binding Model.ToolContentId}" />
                            <Setter Property="IsSelected" Value="{Binding Model.IsSelected, Mode=TwoWay}" />
                            <Setter Property="IsActive" Value="{Binding Model.IsActive, Mode=TwoWay}" />
                            
                        </Style>
                    </components:PanesStyleSelector.ToolStyle>
                    <components:PanesStyleSelector.FileStyle>
                        <Style TargetType="{x:Type LayoutItem}">
                            <Setter Property="Title" Value="{Binding Model.Title}" />
                            <Setter Property="ToolTip" Value="{Binding Model.FilePath}" />
                            <Setter Property="IsActive" Value="{Binding Model.IsActive, Mode=TwoWay}" />
                        </Style>
                    </components:PanesStyleSelector.FileStyle>
                </components:PanesStyleSelector>
            </DockingManager.LayoutItemContainerStyleSelector>
            <DockingManager.LayoutUpdateStrategy>
                <helpers:LayoutInitializer />
            </DockingManager.LayoutUpdateStrategy>
            <LayoutRoot>
                <LayoutPanel Orientation="Horizontal">
                    <LayoutDocumentPane />
                    <LayoutAnchorablePane Name="ToolsPane" DockWidth="200"/>
                </LayoutPanel>
            </LayoutRoot>
        </DockingManager>

    </Grid>
</ui:FluentWindow>